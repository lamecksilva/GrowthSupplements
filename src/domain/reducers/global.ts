import { createSlice } from '@reduxjs/toolkit';

export interface IGlobalState {
  appLoading: boolean;
}

const initialState: IGlobalState = {
  appLoading: false,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// const asyncFunction = createAsyncThunk(
//   'global/asyncLoading',
//   async (appLoading: boolean) => {
//     const response = await fetchCount(appLoading);

//     console.log(response);
//   },
// );

export const globalSlice = createSlice({
  name: 'global',
  initialState,
  reducers: {
    toggleLoading: state => {
      state.appLoading = !state.appLoading;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`

    // testAction: (state, action: PayloadAction<ActionTypeExample>) =>{
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  // extraReducers: builder => {
  //   builder
  //     .addCase(asyncFunction.pending, _ => {
  //       // Put state loading etc
  //     })
  //     .addCase(asyncFunction.fulfilled, _ => {
  //       // Put state idle etc
  //     });
  // },
});

export const { toggleLoading } = globalSlice.actions;

// A mock function to mimic making an async request for data
export function fetchCount(loading = false) {
  return new Promise<{ loading: boolean }>(resolve =>
    setTimeout(() => resolve({ loading }), 500),
  );
}

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// export const selectCount = (state: RootState) => state.counter.value;

// =========================================================================

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default globalSlice.reducer;
